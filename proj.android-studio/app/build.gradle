apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "com.hatenablog.matsukaz"
        minSdkVersion 10
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            ndkBuild {
                targets "MyGame"
                arguments "-j" + Runtime.runtime.availableProcessors()
                arguments "APP_STL:=gnustl_static"
                arguments "APP_LDFLAGS:=-latomic"
                cppFlags "-frtti", "-DCC_ENABLE_CHIPMUNK_INTEGRATION=1", "-std=c++11", "-fsigned-char"
            }
        }

        ndk {
            abiFilters = ["armeabi-v7a"]
            if (project.hasProperty("ABI_FILTERS")) {
                abiFilters = ABI_FILTERS.split(",").collect{it as String}
            }
        }
    }

    externalNativeBuild {
        ndkBuild {
            path "jni/Android.mk"
        }
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "assets"
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        debug {
            externalNativeBuild {
                ndkBuild {
                    arguments "NDK_DEBUG=1"
                    cppFlags "-DCOCOS2D_DEBUG=1"
                }
            }
        }
        release {
            externalNativeBuild {
                ndkBuild {
                    arguments "NDK_DEBUG=0"
                    cppFlags "-DNDEBUG"
                }
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libcocos2dx')
}

task cleanAssets(type: Delete) {
    delete 'assets'
}
task copyAssets(type: Copy) {
    from '../../Resources'
    into 'assets'
}

clean.dependsOn cleanAssets
preBuild.dependsOn copyAssets
